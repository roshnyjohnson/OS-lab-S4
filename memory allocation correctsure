#include<stdio.h>

#include<stdlib.h>

void firstfit(int n, int m, int blksize[], int prosize[]) {
    int i, j, allocation[20], remaining[20], blkstatus[20];
    int internal_frag = 0, external_frag = 0;

    for (j = 0; j < m; j++) {
        blkstatus[j] = 0;       // 0 means block is free
        remaining[j] = 0;       // Initialize remaining fragmentation to 0
    }

    for (i = 0; i < n; i++) {
        allocation[i] = -1;     // Initialize allocations
    }

    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            if (blkstatus[j] == 0 && blksize[j] >= prosize[i]) {
                allocation[i] = j;
                remaining[j] = blksize[j] - prosize[i];
                internal_frag += remaining[j];
                blkstatus[j] = 1; // Mark block as used
                break;
            }
        }
    }

    printf("\nProcess No\tProcess Size\tBlock No\tInternal Fragmentation\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t\t\t\t%d\t\t\t\t", i + 1, prosize[i]);
        if (allocation[i] != -1) {
            int block_no = allocation[i];
            printf("%d\t\t\t\t\t\t%d\n", block_no + 1, remaining[block_no]);
        } else {
            printf("Not Allocated\n");
        }
    }

    // Calculate external fragmentation
    for (j = 0; j < m; j++) {
        if (blkstatus[j] == 0) {
            external_frag += blksize[j];
        }
    }

    printf("\nTotal Internal Fragmentation: %d", internal_frag);
    if (external_frag > 0) {
        printf("\nTotal External Fragmentation: %d\n", external_frag);
    } else {
        printf("\nNo External Fragmentation.\n");
    }
}


void bestfit(int n, int m, int blksize[], int prosize[]) {
    int i, j, allocation[20], blkstatus[20], remaining[20];
    int internal_frag = 0, external_frag = 0;

    for (j = 0; j < m; j++) {
        blkstatus[j] = 0;
        remaining[j] = blksize[j];
    }

    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (i = 0; i < n; i++) {
        int best = -1;
        for (j = 0; j < m; j++) {
            if (blkstatus[j] == 0 && remaining[j] >= prosize[i]) {
                if (best == -1 || remaining[j] < remaining[best]) {
                    best = j;
                }
            }
        }
        if (best != -1) {
            allocation[i] = best;
            remaining[best] -= prosize[i];
            internal_frag += remaining[best];
            blkstatus[best] = 1;
        }
    }

    printf("\nProcess No\tProcess Size\tBlock No\tInternal Fragmentation\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t\t\t%d\t\t\t\t", i + 1, prosize[i]);
        if (allocation[i] != -1) {
            printf("%d\t\t\t\t%d\n", allocation[i] + 1, remaining[allocation[i]]);
        } else {
            printf("Not Allocated\n");
        }
    }

    for (j = 0; j < m; j++) {
        if (blkstatus[j] == 0) {
            external_frag += remaining[j];
        }
    }

    printf("\nTotal Internal Fragmentation: %d", internal_frag);
    if (external_frag > 0) {
        printf("\nTotal External Fragmentation: %d\n", external_frag);
    } else {
        printf("\nNo External Fragmentation.\n");
    }
}



void worstfit(int n, int m, int blksize[], int prosize[]) {
    int i, j, allocation[20], blkstatus[20], remaining[20];
    int internal_frag = 0, external_frag = 0;

    for (j = 0; j < m; j++) {
        blkstatus[j] = 0;
        remaining[j] = blksize[j];
    }

    for (i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (i = 0; i < n; i++) {
        int worst = -1;
        for (j = 0; j < m; j++) {
            if (blkstatus[j] == 0 && remaining[j] >= prosize[i]) {
                if (worst == -1 || remaining[j] > remaining[worst]) {
                    worst = j;
                }
            }
        }
        if (worst != -1) {
            allocation[i] = worst;
            remaining[worst] -= prosize[i];
            internal_frag += remaining[worst];
            blkstatus[worst] = 1;
        }
    }

    printf("\nProcess No\tProcess Size\tBlock No\tInternal Fragmentation\n");
    for (i = 0; i < n; i++) {
        printf("%d\t\t\t\t%d\t\t\t\t", i + 1, prosize[i]);
        if (allocation[i] != -1) {
            printf("%d\t\t\t\t%d\n", allocation[i] + 1, remaining[allocation[i]]);
        } else {
            printf("Not Allocated\n");
        }
    }

    for (j = 0; j < m; j++) {
        if (blkstatus[j] == 0) {
            external_frag += remaining[j];
        }
    }

    printf("\nTotal Internal Fragmentation: %d", internal_frag);
    if (external_frag > 0) {
        printf("\nTotal External Fragmentation: %d\n", external_frag);
    } else {
        printf("\nNo External Fragmentation.\n");
    }
}


int main()
{  
    int i,j,n,m,prosize[20],blksize[20],s;
    printf("enter the number of processes");
    scanf("%d",&n);
    printf("enter the no of blocks");
    scanf("%d",&m);
    printf("enter the processes\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",&prosize[i]);
    }
    printf("enter the block sizes\n");
    for(j=0;j<m;j++)
    {
        scanf("%d",&blksize[j]);

    }
    while(1){
    printf("which do you want?\n1.first fit\n2.bestfit\n3.worstfit\n4.exit");
    scanf("%d",&s);
    switch(s)
    {
        case 1:
        firstfit(n,m,blksize,prosize);
        break;

        case 2:
        bestfit(n,m,blksize,prosize);
        break;

        case 3:
        worstfit(n,m,blksize,prosize);
        break;

        case 4:
        exit(0);

    }}


}
