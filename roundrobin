#include<stdio.h>                                                                                                                                                                                                                       roundrobin.c                                                                                                                                                                                                                                  #include<stdio.h>
struct process
{
    int id;
    int at;
    int bt;
    int ct;
    int wt;
    int rt;
    int started;
    int remaining_bt;
    int tt;
}p[20],temp,s[20];


void roundrobin(int n,struct process s[],int tq)
{
    int queue[100],rear=0,front=0,i,j,completed=0,index;
    float tot_rt,tot_ct,tot_wt,tot_tt;
    tot_rt=0,tot_ct=0,tot_wt=0,tot_tt=0;

    int currenttime=0;
    for(i=0;i<n;i++)
    {
        s[i].remaining_bt=s[i].bt;
        s[i].started=0;
    }

    for(i=0;i<n-1;i++)
    {
        for(j=0;j<n-i-1;j++)
        {
            if(s[j].at>s[j+1].at)
            {
                temp=s[j];
                s[j]=s[j+1];
                s[j+1]=temp;


            }
        }
    }
    s[0].started=1;
//    s[0].rt=0;
    queue[rear++]=0;
    while(completed<n)

    {
        int index=queue[front++];
            if(s[index].started==1&&s[index].bt==s[index].remaining_bt)
            { //tot_rt+=s[index].rt;
                s[index].rt=currenttime-s[index].at;
              //  tot_rt+=s[index].rt;

            }
            if(s[index].remaining_bt>tq)
            {

                currenttime+=tq;
                s[index].remaining_bt-=tq;

            }
            else{
                currenttime+=s[index].remaining_bt;
                s[index].remaining_bt=0;
                s[index].ct=currenttime;
                s[index].tt=s[index].ct-s[index].at;
                s[index].wt=s[index].tt-s[index].bt;
                tot_tt+=s[index].tt;
                tot_ct+=s[index].ct;
                tot_rt+=s[index].rt;
                tot_wt+=s[index].wt;
                completed++;


            }
            printf("|P%d|%d",s[index].id,s[index].ct);
            for(i=0;i<n;i++)
            {
                if(!s[i].started&&s[i].at<=currenttime)
                {
                    queue[rear++]=i;
                    s[i].started=1;
                }

            }
            if(s[index].remaining_bt>0)
            {
                queue[rear++]=index;
            }


    }
    printf("\nPID\tARRIVAL\tBURST\tcompl\twait\ttat\tresponse time\n");
        for(i=0;i<n;i++)
        {
              printf("%d\t%d\t%d\t%d\t%d\t%d\t%d\n",s[i].id,s[i].at,s[i].bt,s[i].ct,s[i].wt,s[i].tt,s[i].rt);
        }
        printf("\n");
    printf("the average completion time is %.2f\n",(float)tot_ct/n);
    printf("the average tt ime is %.2f\n",(float)tot_tt/n);
    printf("the average waiting time is %.2f\n",(float)tot_wt/n);
    printf("the average response time is %.2f\n",(float)tot_rt/n);




}
int main()
{
    int i,n,tq;
    printf("Enter the no. of processes : ");
    scanf("%d", &n);
    printf("enter the time quantam");
    scanf("%d",&tq);
    struct process s[20];
    for (i = 0; i < n; i++) {
        printf("\n enter process id \n");
       scanf("%d",&p[i].id);
        printf("Enter the arrival time : ");
        scanf("%d", &p[i].at);
        printf("Enter the burst time : ");
        scanf("%d", &p[i].bt);
       }
       for(i=0;i<n;i++)
       {
        s[i]=p[i];
       }
       roundrobin(n,s,tq);
       return 0;
}



